// //schema.prisma: Prisma Configuration File That Will Contain Your Database Schema

// generator client {
//     provider = "prisma-client-js"
// }

// datasource db {
//     provider  = "postgresql"
//     url       = env("POSTGRES_PRISMA_URL") //uses connection pooling
//     directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection}
// }

// model Post {
//     id        String  @id @default(cuid())
//     title     String
//     content   String?
//     published Boolean @default(false)
//     author    User?   @relation(fields: [authorId], references: [id])
//     authorId  String?
// }

// model User {
//     id        String   @id @default(cuid())
//     name      String?
//     email     String?  @unique
//     createdAt DateTime @default(now()) @map(name: "created_at")
//     updatedAt DateTime @updatedAt @map(name: "updated_at")
//     posts     Post[]

//     @@map(name: "users")
// }

// //Note: You're occasionally using `@map`and`@@map`to map some field and model names to different column and table names in the underlying database. 
// //This is because NextAuth.js has some special requirements for calling things in your database a certain way.

// // This Prisma schema defines two models, each of which will map to a table in the underlying database: User and Post. 
// //Notice that there's also a relation (one-to-many) between the two models, via the author field on Post and the posts field on User.

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model User {
  id            String       @default(cuid()) @id
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  @@map(name: "users")
}